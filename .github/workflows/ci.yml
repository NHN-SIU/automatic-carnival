---
name: "CI"
concurrency:  # Cancel any existing runs of this workflow for this same PR
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true
on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - "main"
      - "develop"
      - "6-undersÃ¸ke-testing-med-nautobot-django"
    tags:
      - "v*"
  pull_request: ~

env:
  APP_NAME: "praksis-nhn-nautobot"

jobs:
  ruff-format:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Linting: ruff format"
        run: "poetry run invoke ruff --action format"
  ruff-lint:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Linting: ruff"
        run: "poetry run invoke ruff --action lint"
  check-docs-build:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Check Docs Build"
        run: "poetry run invoke build-and-check-docs"
  poetry:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Checking: poetry lock file"
        run: "poetry run invoke lock --check"
  yamllint:
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
  check-in-docker:
    needs:
      - "ruff-format"
      - "ruff-lint"
      - "poetry"
      - "yamllint"
    runs-on: "ubuntu-22.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]
        nautobot-version: ["2.0.0"]
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_PRAKSIS_NHN_NAUTOBOT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Constrain Nautobot version and regenerate lock file"
        env:
          INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "true"
        run: "poetry run invoke lock --constrain-nautobot-ver --constrain-python-ver"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build"
        uses: "docker/build-push-action@v5"
        with:
          builder: "${{ steps.buildx.outputs.name }}"
          context: "./"
          push: false
          load: true
          tags: "${{ env.APP_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          cache-to: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          build-args: |
            NAUTOBOT_VER=${{ matrix.nautobot-version }}
            PYTHON_VER=${{ matrix.python-version }}
            CI=true
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Linting: pylint"
        run: "poetry run invoke pylint"
      - name: "Checking: App Config"
        run: "poetry run invoke validate-app-config"
      - name: "Checking: migrations"
        run: "poetry run invoke check-migrations"
  unittest:
    needs:
      - "check-in-docker"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.12"]
        db-backend: ["postgresql"]
        nautobot-version: ["stable"]
        include:
          - python-version: "3.11"
            db-backend: "postgresql"
            nautobot-version: "2.0.0"
          - python-version: "3.12"
            db-backend: "mysql"
            nautobot-version: "stable"
    runs-on: "ubuntu-22.04"
    env:
      INVOKE_PRAKSIS_NHN_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_PRAKSIS_NHN_NAUTOBOT_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Constrain Nautobot version and regenerate lock file"
        env:
          INVOKE_PRAKSIS_NHN_NAUTOBOT_LOCAL: "true"
        run: "poetry run invoke lock --constrain-nautobot-ver --constrain-python-ver"
      - name: "Set up Docker Buildx"
        id: "buildx"
        uses: "docker/setup-buildx-action@v3"
      - name: "Build"
        uses: "docker/build-push-action@v5"
        with:
          builder: "${{ steps.buildx.outputs.name }}"
          context: "./"
          push: false
          load: true
          tags: "${{ env.APP_NAME }}/nautobot:${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          file: "./development/Dockerfile"
          cache-from: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          cache-to: "type=gha,scope=${{ matrix.nautobot-version }}-py${{ matrix.python-version }}"
          build-args: |
            NAUTOBOT_VER=${{ matrix.nautobot-version }}
            PYTHON_VER=${{ matrix.python-version }}
            CI=true
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Use Mysql invoke settings when needed"
        run: "cp invoke.mysql.yml invoke.yml"
        if: "matrix.db-backend == 'mysql'"
      - name: "Run Tests"
        run: "poetry run invoke unittest"
  changelog:
    if: >
      contains(fromJson('["develop","ltm-1.6"]'), github.base_ref) &&
      (github.head_ref != 'main') && (!startsWith(github.head_ref, 'release'))
    runs-on: "ubuntu-22.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v6"
        with:
          poetry-version: "1.8.5"
      - name: "Check for changelog entry"
        run: |
          git fetch --no-tags origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
          poetry run towncrier check --compare-with origin/${{ github.base_ref }}